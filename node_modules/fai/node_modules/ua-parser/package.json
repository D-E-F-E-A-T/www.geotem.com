{
  "name": "ua-parser",
  "description": "A port of Browserscope's user agent parser.",
  "main": "./js/index",
  "version": "0.3.5",
  "maintainers": [
    {
      "name": "Tobie Langel",
      "email": "tobie.langel@gmail.com",
      "url": "http://tobielangel.com"
    }
  ],
  "contributors": [
    {
      "name": "Tobie Langel",
      "email": "tobie.langel@gmail.com",
      "url": "http://tobielangel.com"
    },
    {
      "name": "Lindsey Simon",
      "email": "lsimon@commoner.com",
      "url": "http://www.idreamofuni.com"
    },
    {
      "name": "Philip Tellis",
      "email": "philip@bluesmoon.info",
      "url": "http://bluesmoon.info"
    },
    {
      "name": "Dave Olsen",
      "email": "dmolsen@gmail.com",
      "url": "http://dmolsen.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/tobie/ua-parser.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/tobie/ua-parser/master/js/LICENSE"
    },
    {
      "type": "Apache-2.0",
      "url": "https://raw.github.com/tobie/ua-parser/master/js/LICENSE"
    }
  ],
  "dependencies": {
    "yamlparser": ">=0.0.2"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "scripts": {
    "test": "mocha -u tdd -R dot ./js/test/*.js"
  },
  "readme": "ua-parser [![Build Status](https://secure.travis-ci.org/tobie/ua-parser.png?branch=master)](https://travis-ci.org/tobie/ua-parser)\n=========\n\n`ua-parser` is a multi-language port of [BrowserScope][2]'s [user agent string parser][3].\n\nThe crux of the original parser--the data collected by [Steve Souders][4] over the years--has been extracted into a separate [YAML file][5] so as to be reusable _as is_ by implementations in other programming languages.\n\n`ua-parser` is just a small wrapper around this data, along with ongoing improvements to the definitions.\n\nMaintainers\n-----------\n\n* C#: [Søren Enemærke](https://github.com/enemaerke) ([@sorenenemaerke](https://twitter.com/sorenenemaerke))\n* D: [Shripad K](https://github.com/shripadk) ([@24shri](https://twitter.com/24shri))\n* Go: [Yihuan Zhou](https://github.com/yihuanz) ([@yihuanz](https://twitter.com/yihuanz))\n* Haskell: [Ozgun Ataman](https://github.com/ozataman) ([@ozataman](https://twitter.com/ozataman))\n* Java: [Steve Jiang](https://github.com/sjiang) ([@sjiang](https://twitter.com/sjiang))\n* JavaScript: [Tobie Langel](https://github.com/tobie) ([@tobie](https://twitter.com/tobie))\n* Perl: [Mamod Mehyar](https://github.com/mamod) ([@mamod](https://twitter.com/mamod))\n* PHP: [Lars Strojny](https://github.com/lstrojny) ([@lstrojny](https://twitter.com/lstrojny))\n* Pig: [Niels Basjes](https://github.com/nielsbasjes) ([@nielsbasjes](https://twitter.com/nielsbasjes))\n* Python: [Lindsey Simon](https://github.com/elsigh) ([@elsigh](https://twitter.com/elsigh))\n* `regexes.yaml`: Lindsey Simon & Tobie Langel\n\nCommunication channels\n-----------------------\n\n* irc (#ua-parser on freenode) <irc://chat.freenode.net#ua-parser>\n* [mailing list](https://groups.google.com/forum/#!forum/ua-parser)\n\nContributing Changes to regexes.yaml\n------------------------------------\n\nPlease read the [contributors' guide](https://github.com/tobie/ua-parser/blob/master/CONTRIBUTING.md)\n\nOther ua-parser Libraries\n-------------------------\n\nThere are a few other libraries which make use of ua-parser's patterns. These include:\n\n* Ruby - [user_agent_parser](https://github.com/toolmantim/user_agent_parser)\n\nSee ua-parser in action\n-----------------------\n\n[whatsmyua.info](http://www.whatsmyua.info) shows what ua-parser reports for\nyour current user agent/OS/device, or for any arbitrary user agent string.\n\nUsage :: [node.js][1]\n---------------------\n```js\nvar http = require('http');\n\nhttp.createServer(function (req, res) {\n\n  var r = require('ua-parser').parse(req.headers['user-agent']);\n\n  console.log(r.ua.toString());        // -> \"Safari 5.0.1\"\n  console.log(r.ua.toVersionString()); // -> \"5.0.1\"\n  console.log(r.ua.family)             // -> \"Safari\"\n  console.log(r.ua.major);             // -> \"5\"\n  console.log(r.ua.minor);             // -> \"0\"\n  console.log(r.ua.patch);             // -> \"1\"\n\n  console.log(r.os.toString());        // -> \"iOS 5.1\"\n  console.log(r.os.toVersionString()); // -> \"5.1\"\n  console.log(r.os.family)             // -> \"iOS\"\n  console.log(r.os.major);             // -> \"5\"\n  console.log(r.os.minor);             // -> \"1\"\n  console.log(r.os.patch);             // -> null\n\n  console.log(r.device.family);        // -> \"iPhone\"\n\n}).listen(3000);\n```\n\nNote if you're only interested in one of the `ua`, `device` or `os` objects, you will getter better performance by using the more specific methods (`uaParser.parseUA`, `uaParser.parseOS` and `uaParser.parseDevice` respectively), e.g.:\n\n```js\nvar http = require('http'),\n    p = require('ua-parser');\n\nhttp.createServer(function (req, res) {\n\n  var userAgent = req.headers['user-agent'];\n\n  console.log(p.parseUA(userAgent).toString());\n  // -> \"Safari 5.0.1\"\n  console.log(p.parseOS(userAgent).toString());\n  // -> \"iOS 5.1\"\n  console.log(p.parseDevice(userAgent).toString());\n  // -> \"iPhone\"\n\n}).listen(3000);\n```\n\nUsage :: python\n---------------\nYou can install `ua-parser` by running:\n\n```python\npip install pyyaml ua-parser\n```\n\nAnd here's how to use it:\n\n```python\nfrom ua_parser import user_agent_parser\n\n# On the server, you could use a WebOB request object.\nuser_agent_string = request.META.get('HTTP_USER_AGENT')\n\n# For demonstration purposes, though an iPhone ...\nuser_agent_string = 'Mozilla/5.0 (iPhone; CPU iPhone OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B179 Safari/7534.48.3'\n\n# Get back a big dictionary of all the goodies.\nresult_dict = user_agent_parser.Parse(user_agent_string)\n\nprint result_dict['user_agent']\n# {'major': '5', 'minor': '1', 'family': 'Mobile Safari', 'patch': None}\n\nprint result_dict['os']\n# {'major': '5', 'patch_minor': None, 'minor': '1', 'family': 'iOS', 'patch': None}\n\nprint result_dict['device']\n# {'family': 'iPhone'}\n```\n\n\nUsage :: java\n-------------\n```java\nimport ua_parser.Parser;\nimport ua_parser.Client;\n\n...\n\n  String uaString = \"Mozilla/5.0 (iPhone; CPU iPhone OS 5_1_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B206 Safari/7534.48.3\";\n\n  Parser uaParser = new Parser();\n  Client c = uaParser.parse(uaString);\n\n  System.out.println(c.userAgent.family); // => \"Mobile Safari\"\n  System.out.println(c.userAgent.major);  // => \"5\"\n  System.out.println(c.userAgent.minor);  // => \"1\"\n\n  System.out.println(c.os.family);        // => \"iOS\"\n  System.out.println(c.os.major);         // => \"5\"\n  System.out.println(c.os.minor);         // => \"1\"\n\n  System.out.println(c.device.family);    // => \"iPhone\"\n```\n\n\nUsage :: Pig\n-------------\nFor Pig there are UDFs for getting a single value and UDFs for getting a tuple with all values for either Device, Os of UserAgent.\nFor most usecases the tuple UDFs will be the most useful.\n\n```pig\nREGISTER ua-parser-pig-0.1-SNAPSHOT-job.jar\n\nDEFINE Device           ua_parser.pig.Device;\nDEFINE Os               ua_parser.pig.Os;\nDEFINE UserAgent        ua_parser.pig.UserAgent;\n\nUserAgents =\n    Load 'useragents.txt' AS (useragent:chararray);\n\nAgentSpecs =\n    FOREACH UserAgents\n    GENERATE\n             Device(useragent)              AS Device,\n             Os(useragent)                  AS Os,\n             UserAgent(useragent)           AS UserAgent,\n\n             useragent                      AS Useragent;\n\nDESCRIBE AgentSpecs;\nDUMP AgentSpecs;\n```\n\nThe versions that return only a single value:\n\n```pig\nREGISTER ua-parser-pig-0.1-SNAPSHOT-job.jar\n\nDEFINE DeviceFamily     ua_parser.pig.device.Family;\nDEFINE OsFamily         ua_parser.pig.os.Family;\nDEFINE OsMajor          ua_parser.pig.os.Major;\nDEFINE OsMinor          ua_parser.pig.os.Minor;\nDEFINE OsPatch          ua_parser.pig.os.Patch;\nDEFINE OsPatchMinor     ua_parser.pig.os.PatchMinor;\nDEFINE UseragentFamily  ua_parser.pig.useragent.Family;\nDEFINE UseragentMajor   ua_parser.pig.useragent.Major;\nDEFINE UseragentMinor   ua_parser.pig.useragent.Minor;\nDEFINE UseragentPatch   ua_parser.pig.useragent.Patch;\n\nUserAgents =\n    Load 'useragents.txt' AS (useragent:chararray);\n\nAgentSpecs =\n    FOREACH  UserAgents\n    GENERATE DeviceFamily(useragent)    AS DeviceFamily:chararray,\n\n             OsFamily(useragent)        AS OsFamily:chararray,\n             OsMajor(useragent)         AS OsMajor:chararray,\n             OsMinor(useragent)         AS OsMinor:chararray,\n             OsPatch(useragent)         AS OsPatch:chararray,\n             OsPatchMinor(useragent)    AS OsPatchMinor:chararray,\n\n             UseragentFamily(useragent) AS UseragentFamily:chararray,\n             UseragentMajor(useragent)  AS UseragentMajor:chararray,\n             UseragentMinor(useragent)  AS UseragentMinor:chararray,\n             UseragentPatch(useragent)  AS UseragentPatch:chararray,\n\n             useragent                  AS Useragent;\n\nDUMP AgentSpecs;\n```\n\n\nUsage :: php\n------------\n\n```php\nrequire_once 'vendor/autoload.php';\nuse UAParser\\Parser;\n\n$ua = \"Mozilla/5.0 (Macintosh; Intel Ma...\";\n\n$parser = Parser::create();\n$result = $parser->parse($ua);\n\nprint $result->ua->family;            // Safari\nprint $result->ua->major;             // 6\nprint $result->ua->minor;             // 0\nprint $result->ua->patch;             // 2\nprint $result->ua->toString();        // Safari 6.0.2\nprint $result->ua->toVersion();       // 6.0.2\n\nprint $result->os->family;            // Mac OS X\nprint $result->os->major;             // 10\nprint $result->os->minor;             // 7\nprint $result->os->patch;             // 5\nprint $result->os->patchMinor;        // [null]\nprint $result->os->toString();        // Mac OS X 10.7.5\nprint $result->os->toVersion();       // 10.7.5\n\nprint $result->device->family;        // Other\n\nprint $result->toString();            // Safari 6.0.2/Mac OS X 10.7.5\nprint $result->uaOriginal;            // Mozilla/5.0 (Macintosh; Intel Ma...\n```\n\n[More information is available in the README](https://github.com/tobie/ua-parser/tree/master/php) in the PHP directory\n\nUsage :: D\n-------------\n```d\nimport UaParser;\n\nimport std.stdio;\n\nvoid main() {\n    auto agent = UaParser.parse(\"Mozilla/5.0 (iPhone; CPU iPhone OS 5_1_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B206 Safari/7534.48.3\");\n    std.stdio.writeln(agent.browser.family); // Mobile Safari\n    std.stdio.writeln(agent.browser.major);  // 5\n    std.stdio.writeln(agent.browser.minor);  // 1\n    std.stdio.writeln(agent.browser.patch);  // 0\n    std.stdio.writeln(agent.browser.toString); // Mobile Safari 5.1.0\n    std.stdio.writeln(agent.browser.toVersionString); // 5.1.0\n\n    std.stdio.writeln(agent.os.family); // iOS\n    std.stdio.writeln(agent.os.major);  // 5\n    std.stdio.writeln(agent.os.minor);  // 1\n    std.stdio.writeln(agent.os.patch);  // 1\n    std.stdio.writeln(agent.os.toString); // iOS 5.1.1\n    std.stdio.writeln(agent.os.toVersionString); // 5.1.1\n\n    std.stdio.writeln(agent.toFullString); // Mobile Safari 5.1.0/iOS 5.1.1\n\n    std.stdio.writeln(agent.device.family); // iPhone\n\n    std.stdio.writeln(agent.isMobile); // true\n    std.stdio.writeln(agent.isSpider); // false\n}\n```\n\nUsage :: C#\n-------------\nInstall the NuGet package\n\n\tInstall-Package UAParser\n\nSample Usage:\n\n```csharp\nusing System;\n\nnamespace UAParser.ConsoleApp\n{\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      String uaString = \"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_5; en-us) AppleWebKit/533.18.1 (KHTML, like Gecko) Version/5.0.2 Safari/533.18.5\";\n\n      Parser uaParser = Parser.GetDefault();\n\n      ClientInfo c = uaParser.Parse(uaString);\n\n      Console.WriteLine(c.UserAgent);  //Safari 5.0.2\n      Console.WriteLine(c.OS); // Mac OS X 10.6.5\n      Console.WriteLine(c.Device); //\n\n      Console.ReadLine();\n    }\n  }\n}\n```\n\nUsage :: Perl\n-------------\n```perl\nuse HTTP::UA::Parser;\nmy $r = HTTP::UA::Parser->new();\n\nprint $r->ua->toString();         # -> \"Safari 5.0.1\"\nprint $r->ua->toVersionString();  # -> \"5.0.1\"\nprint $r->ua->family;             # -> \"Safari\"\nprint $r->ua->major;              # -> \"5\"\nprint $r->ua->minor;              # -> \"0\"\nprint $r->ua->patch;              # -> \"1\"\n\nprint $r->os->toString();         # -> \"iOS 5.1\"\nprint $r->os->toVersionString();  # -> \"5.1\"\nprint $r->os->family              # -> \"iOS\"\nprint $r->os->major;              # -> \"5\"\nprint $r->os->minor;              # -> \"1\"\nprint $r->os->patch;              # -> undef\n\nprint $r->device->family;         # -> \"iPhone\"\n\nMore information is available in the README in the perl directory\n```\n\nUsage :: Haskell\n---------------\n\nInstall the package:\n\n    cabal update\n    cabal install ua-parser\n\nSample Usage:\n\n```haskell\n{-# LANGUAGE OverloadedStrings #-}\n\nmodule Main where\n\nimport Web.UAParser\n\ntest_string = \"Mozilla/5.0 (iPhone; CPU iPhone OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B179 Safari/7534.48.3\"\n\nmain = do\n    print $ parseUA test_string\n    print $ parseOS test_string\n```\n\nResult of running this program:\n\n```haskell\n-- Result from user agent parse\nJust (UAResult {uarFamily = \"Mobile Safari\", uarV1 = Just \"5\", uarV2 = Just \"1\", uarV3 = Nothing})\n\n-- Result from operating system parse\nJust (OSResult {osrFamily = \"iOS\", osrV1 = Just \"5\", osrV2 = Just \"1\", osrV3 = Nothing, osrV4 = Nothing})\n```\n\nPlease refer to Haddocks for more info; the API is pretty straightforward.\n\nUsage :: Go\n------------\n\nInstall the package:\n\n    go get \"github.com/tobie/ua-parser/go/uaparser\"\n\nSample Usage\n\n```\npackage main\n\nimport (\n  \"github.com/tobie/ua-parser/go/uaparser\"\n  \"fmt\"\n)\n\nfunc main() {\n  testStr := \"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_3; en-us; Silk/1.1.0-80) AppleWebKit/533.16 (KHTML, like Gecko) Version/5.0 Safari/533.16 Silk-Accelerated=true\"\n  regexFile := \"../../regexes.yaml\"\n  parser := uaparser.New(regexFile)\n  client := parser.Parse(testStr)\n  fmt.Println(client.UserAgent.Family)  // \"Amazon Silk\"\n  fmt.Println(client.UserAgent.Major)   // \"1\"\n  fmt.Println(client.UserAgent.Minor)   // \"1\"\n  fmt.Println(client.UserAgent.Patch)   // \"0-80\"\n  fmt.Println(client.Os.Family)         // \"Android\"\n  fmt.Println(client.Os.Major)          // \"\"\n  fmt.Println(client.Os.Minor)          // \"\"\n  fmt.Println(client.Os.Patch)          // \"\"\n  fmt.Println(client.Os.PatchMinor)     // \"\"\n  fmt.Println(client.Device.Family)     // \"Kindle Fire\"\n}\n```\n\n[More information is available in the README](https://github.com/tobie/ua-parser/tree/master/go/uaparser) in the Go directory\n\nLicense\n-------\n\nThe data contained in `regexes.yaml` is Copyright (c) 2009 Google Inc. and [other contributors][6], and available under the [Apache License, Version 2.0][7].\n\nThe original python code is Copyright (c) 2008 Google Inc. and [other contributors][8],and is available under the [Apache License, Version 2.0][9].\n\nThe JS port is Copyright (c) 2010 Tobie Langel and [other contributors][10], and is available under [your choice of MIT or Apache Version 2.0 license][11].\n\nThe PHP port is Copyright (c) 2011-2012 Dave Olsen and [other contributors][12], and is available under the [MIT license][13].\n\nThe Java port is Copyright (c) 2012 Twitter, Inc and [other contributors][14], and is available under the [Apache License, Version 2.0][7].\n\nThe D port is Copyright (c) 2012 Shripad K and [other contributors][15], and is available under the [MIT license][16].\n\nThe C# port is Copyright (c) 2012 Søren Enemærke and [other contributors][17], and is available under the [Apache License, Version 2.0][18].\n\nThe Perl port is Copyright (c) 2012 Mamod Mehyar and [other contributors][19], and is available under the [Perl License, Version 5.10.1][20].\n\nThe Pig port is Copyright (c) 2013 Niels Basjes and [other contributors][21], and is available under the [Apache License, Version 2.0][22].\n\nThe Go port is Copyright (c) 2013 Yihuan Zhou and [other contributors][23], and is available under the [MIT License][24].\n\n\n[1]: http://nodejs.org\n[2]: http://www.browserscope.org\n[3]: http://code.google.com/p/ua-parser/\n[4]: http://stevesouders.com/\n[5]: https://raw.github.com/tobie/ua-parser/master/regexes.yaml\n[6]: https://github.com/tobie/ua-parser/commits/master/regexes.yaml\n[7]: http://www.apache.org/licenses/LICENSE-2.0\n[8]: https://github.com/tobie/ua-parser/commits/master/py\n[9]: https://raw.github.com/tobie/ua-parser/master/py/LICENSE\n[10]: https://github.com/tobie/ua-parser/commits/master/js\n[11]: https://raw.github.com/tobie/ua-parser/master/js/LICENSE\n[12]: https://github.com/tobie/ua-parser/commits/master/php\n[13]: https://raw.github.com/tobie/ua-parser/master/php/LICENSE\n[14]: https://github.com/tobie/ua-parser/commits/master/java\n[15]: https://github.com/tobie/ua-parser/commits/master/d\n[16]: https://raw.github.com/tobie/ua-parser/master/d/LICENSE\n[17]: https://github.com/tobie/ua-parser/commits/master/csharp\n[18]: https://raw.github.com/tobie/ua-parser/master/csharp/LICENSE\n[19]: https://github.com/tobie/ua-parser/commits/master/perl\n[20]: http://dev.perl.org/licenses\n[21]: https://github.com/tobie/ua-parser/commits/master/pig\n[22]: https://raw.github.com/tobie/ua-parser/master/pig/LICENSE.txt\n[23]: https://github.com/tobie/ua-parser/commits/master/go\n[24]: https://raw.github.com/tobie/ua-parser/master/go/uaparser/LICENSE.md\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/tobie/ua-parser/issues"
  },
  "homepage": "https://github.com/tobie/ua-parser",
  "_id": "ua-parser@0.3.5",
  "_from": "ua-parser@>=0.3.5 <0.4.0"
}
